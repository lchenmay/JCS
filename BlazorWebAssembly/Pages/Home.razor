@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

@using BizShared;

@inject IJSRuntime JsRuntime;

<PageTitle>J-Category Systems | Home</PageTitle>

<h1>J-Category Systems</h1>

<div>
    <p>Slogan: "Program is like surgery: shorter is better."</p>
</div>

<style>
    canvas {
/*         width: 100%;
        height: 100%;
 */        background-color: magenta
    }

</style>

<script>
    function renderJS(timeStamp) {
        theInstance.invokeMethodAsync('RenderInBlazor', timeStamp);
        window.requestAnimationFrame(renderJS);
    }

    function resizeCanvasToFitWindow() {
        var holder = document.getElementById('canvasHolder');
        var canvas = holder.querySelector('canvas');
        if (canvas) {
            //canvas.width = window.innerWidth;
            //canvas.height = window.innerHeight;
            theInstance.invokeMethodAsync('ResizeInBlazor', canvas.width, canvas.height);
        }
    }

    window.initRenderJS = (instance) => {
        window.theInstance = instance;
        window.addEventListener("resize", resizeCanvasToFitWindow);
        resizeCanvasToFitWindow();
        window.requestAnimationFrame(renderJS);
    };
</script>

<div id="canvasHolder" 
    @onmousemove="MouseMove"
    @onmouseleave="MouseLeave"
    @onmouseup="MouseUp"
    class="canvas">
    <BECanvas Width="800" Height="600" @ref="CanvasRef"></BECanvas>
</div>

<div>Mission</div>
<ul>
    <li>Develop cross-platform systems simply, adaptively and rapidly.</li>
    <li>Coding once, multiple front ends.</li>
</ul>

<div>Methodology</div>
<ul>
    <li>Type sharing</li>
    <li>Functional programming</li>
    <li>Immutable architecture</li>
    <li>Automated coding</li>
</ul>

<div>Solutions</div>
<ul>
    <li>MAUI in F#: cross-platform mobile solution</li>
    <li>Type sharing</li>
</ul>



<div>MAUI In F#</div>
<div>
    I have tried to shift MAUI (a cross-platform framework, code once, deploy to Windows/Android/iOS ... ) development into functional programming language F#, which could be more efficient and robust (bug-free). Now a demo is available at Github. It is a SPA (single-page application). The code of C# is minimum and almost all of the implementation of UI and business logic are moved to the F# code base.
</div>
<div><a href="https://github.com/lchenmay/Common">Github Repository</a></div>

<div>RPC as a Functor: Cross-Platform Type Sharing</div>

<div>
    <a href="https://doi.org/10.5281/zenodo.11397406" target="_blank"><img src="https://zenodo.org/badge/DOI/10.5281/zenodo.11397406.svg"></a>
</div>

